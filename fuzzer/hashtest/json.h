// Copyright 2024 The Silifuzz Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef THIRD_PARTY_SILIFUZZ_FUZZER_HASHTEST_JSON_H_
#define THIRD_PARTY_SILIFUZZ_FUZZER_HASHTEST_JSON_H_

#include <ostream>
#include <type_traits>

#include "absl/strings/escaping.h"
#include "absl/strings/string_view.h"

namespace silifuzz {

class JSONFormatter {
 public:
  explicit JSONFormatter(std::ostream& out) : out_(out) {}

  // Format an object, with the fields of the object generated by the callback.
  template <typename F>
  inline JSONFormatter& Object(F&& callback) {
    BeginObject();
    callback();
    EndObject();
    return *this;
  }

  // Format an list, with the contents of the list generated by the callback.
  template <typename F>
  inline JSONFormatter& List(F&& callback) {
    BeginList();
    callback();
    EndList();
    return *this;
  }

  // Print the raw  value.
  template <typename T>
  JSONFormatter& Value(const T& value) {
    PrintCommaIfNeeded();
    Format(value);
    return *this;
  }

  // Print the field name, the value will be printed separately.
  JSONFormatter& Field(absl::string_view name) {
    PrintCommaIfNeeded();
    Format(name);
    out_ << ":";
    comma_needed_ = false;
    return *this;
  }

  // Print the field: value pair.
  template <typename T>
  JSONFormatter& Field(absl::string_view name, const T& value) {
    Field(name);
    Value(value);
    return *this;
  }

 private:
  void Format(absl::string_view value) {
    out_ << '"' << absl::CEscape(value) << '"';
  }

  template <typename T, typename = std::enable_if_t<std::is_arithmetic_v<T>>>
  void Format(T value) {
    out_ << value;
  }

  void PrintCommaIfNeeded() {
    if (comma_needed_) {
      out_ << ",";
    } else {
      comma_needed_ = true;
    }
  }

  void BeginObject() {
    PrintCommaIfNeeded();
    out_ << "{";
    comma_needed_ = false;
  }

  void EndObject() {
    out_ << "}";
    comma_needed_ = true;
  }

  void BeginList() {
    PrintCommaIfNeeded();
    out_ << "[";
    comma_needed_ = false;
  }

  void EndList() {
    out_ << "]";
    comma_needed_ = true;
  }

  std::ostream& out_;
  bool comma_needed_ = false;
};

}  // namespace silifuzz

#endif  // THIRD_PARTY_SILIFUZZ_FUZZER_HASHTEST_JSON_H_
